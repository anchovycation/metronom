import{_ as s,c as n,o as a,a as l}from"./app.714335c7.js";const C=JSON.parse(`{"title":"Lets Start","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. Create Metronom object","slug":"_1-create-metronom-object","link":"#_1-create-metronom-object","children":[]},{"level":2,"title":"2. Define Model","slug":"_2-define-model","link":"#_2-define-model","children":[{"level":3,"title":"2.1 Get/Set String Key","slug":"_2-1-get-set-string-key","link":"#_2-1-get-set-string-key","children":[]}]},{"level":2,"title":"3. Define model","slug":"_3-define-model","link":"#_3-define-model","children":[]},{"level":2,"title":"4. Use model's query inferface","slug":"_4-use-model-s-query-inferface","link":"#_4-use-model-s-query-inferface","children":[]}],"relativePath":"getting-started/lets-start.md","lastUpdated":1677094105000}`),o={name:"getting-started/lets-start.md"},e=l(`<h1 id="lets-start" tabindex="-1">Lets Start <a class="header-anchor" href="#lets-start" aria-hidden="true">#</a></h1><h2 id="_1-create-metronom-object" tabindex="-1">1. Create <code>Metronom</code> object <a class="header-anchor" href="#_1-create-metronom-object" aria-hidden="true">#</a></h2><p>The <code>Metronom</code> object is create <code>Model</code> with your defined options like <code>port</code>, <code>host</code>, <code>url</code> or <code>ttl</code>. This step is not required but <strong>recomended</strong> because at the unnormal usage scenario(you need to use diffirent url from default redis ...) you must to pass that options to all <code>Model</code> defines otherwise <code>Metronom</code> object do it automatically.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Metronom</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">LogLevels</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">metronom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> metronom </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Metronom</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">redisClientOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">host</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">172.168.1.123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">port</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1234</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">log</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> LogLevels</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Error</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-define-model" tabindex="-1">2. Define <code>Model</code> <a class="header-anchor" href="#_2-define-model" aria-hidden="true">#</a></h2><p><code>Model</code> is redis hash maper. It has two diffirent flow.</p><ul><li><code>flex</code>: you don&#39;t need to define schema. All hash keys dynamically mapped</li><li><code>schema based</code>: You define type, default value etc. in to the schema and metronom use it read/write operations. Keys not found in the schema are ignored.</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> tokenModel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> metronom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">define</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// const userModel = new Model(</span></span>
<span class="line"><span style="color:#A6ACCD;">  schema</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> redisKeyPrefix</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> modelOptions</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-1-get-set-string-key" tabindex="-1">2.1 Get/Set String Key <a class="header-anchor" href="#_2-1-get-set-string-key" aria-hidden="true">#</a></h3><p>Now, you can get/set key from defined metronom object</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> isSuccess </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> metronom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setKey</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// its return &quot;OK&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> metronom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getKey</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// bar</span></span>
<span class="line"></span></code></pre></div><h2 id="_3-define-model" tabindex="-1">3. Define model <a class="header-anchor" href="#_3-define-model" aria-hidden="true">#</a></h2><p><code>Model</code> is redis hash maper. It has two diffirent flow.</p><ul><li><code>flex</code>: you don&#39;t need to define schema. All hash keys dynamically mapped</li><li><code>schema based</code>: You define type, default value etc. in to the schema and metronom use it read/write operations. Keys not found in the schema are ignored.</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> userModel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> metronom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">define</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// const userModel = new Model(</span></span>
<span class="line"><span style="color:#A6ACCD;">  schema</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> redisKeyPrefix</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> modelOptions</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="_4-use-model-s-query-inferface" tabindex="-1">4. Use model&#39;s query inferface <a class="header-anchor" href="#_4-use-model-s-query-inferface" aria-hidden="true">#</a></h2><p>Now, you can use all metronom queries(<code>Metronom</code>, <code>Model</code> and <code>ModelInstance</code>) like <code>Model.create</code>, <code>Model.findById</code>, <code>Model.destroy</code>, <code>ModelInstance.save</code>, etc. .</p><p>Start coding the project that will save the world ðŸ˜ƒ</p><p><strong>For example</strong>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> tokenModel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> metronom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">define</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// const tokenModel = new Model(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Number</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">permissions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">none</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">expireDate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Boolean</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">dafeult</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tokens</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// default \`object\`</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">keyUnique</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// if you don&#39;t define, we use unix timestamp for \`keyUniqe\` value</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">log</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> LogLevels</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">All</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// default is \`None\`</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// set \`flexSchema\` to true and never define schema</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> token </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> tokenModel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foobarbaz</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Redis key - &#39;tokens:1&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   id: 1,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   value: &#39;foobarbaz&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   permissions: [&#39;none&#39;],</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   expireDate: null,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">token</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">permissions</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shift</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">token</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">permissions</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">read</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">token</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">permissions</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">update</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> token</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// hgetall tokens:1</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> admin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> tokenModel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findById</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   id: 1,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   value: &#39;foobarbaz&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   permissions: [&#39;read&#39;, &#39;update&#39;],</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   expireDate: null,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// del tokens:1</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> admin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">destroy</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,20),p=[e];function t(c,r,y,D,i,F){return a(),n("div",null,p)}const d=s(o,[["render",t]]);export{C as __pageData,d as default};
